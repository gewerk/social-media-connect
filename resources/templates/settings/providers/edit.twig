{% requireAdmin %}

{% extends '_layouts/cp' %}

{% import '_includes/forms' as forms %}

{% set crumbs = [
  { label: 'Settings' | t('app'), url: url('settings') },
  { label: 'Plugins' | t('app'), url: url('settings/plugins') },
  { label: 'Social Media Connect' | t('social-media-connect'), url: url('settings/plugins/social-media-connect') },
  { label: 'Providers' | t('social-media-connect'), url: url('settings/plugins/social-media-connect/providers') },
] %}

{% set fullPageForm = true %}

{% set formActions = [
  {
    label: 'Save and continue editing' | t('app'),
    redirect: 'settings/plugins/social-media-connect/providers/{id}' | hash,
    shortcut: true,
    retainScroll: true,
  },
  not isNew ? {
    destructive: true,
    label: 'Delete provider' | t('formie'),
    action: 'social-media-connect/providers/delete',
    redirect: 'settings/plugins/social-media-connect/providers' | hash,
    confirm: 'Are you sure you want to delete this provider?' | t('social-media-connect'),
  },
] | filter %}

{% block content %}
  {{ actionInput('social-media-connect/providers/save') }}
  {{ redirectInput('settings/plugins/social-media-connect/providers') }}

  {% if not isNew %}
    {{ hiddenInput('id', provider.id) }}
    {{ hiddenInput('sortOrder', provider.sortOrder) }}
  {% endif %}

  <div id="settings">
    {{ forms.textField({
      first: true,
      label: 'Name' | t('social-media-connect'),
      instructions: 'What this provider will be called in the control panel.' | t('social-media-connect'),
      id: 'name',
      name: 'name',
      value: provider.getName() ?? null,
      errors: provider.getErrors('name') ?? null,
      autofocus: true,
      required: true,
    }) }}

    {{ forms.textField({
      label: 'Handle' | t('social-media-connect'),
      instructions: 'How youâ€™ll refer to this provider in the templates.' | t('social-media-connect'),
      id: 'handle',
      name: 'handle',
      class: 'code',
      autocorrect: false,
      autocapitalize: false,
      value: provider.handle ?? null,
      errors: provider.getErrors('handle') ?? null,
      required: true,
    }) }}

    <hr>

    {{ forms.selectField({
      label: 'Provider Type' | t('social-media-connect'),
      id: 'type',
      name: 'type',
      options: providerTypeOptions,
      value: provider ? className(provider) : null,
      toggle: true,
    }) }}

    {{ missingPlaceholder | raw }}

    {% for providerType in providerTypes %}
      {% set isCurrent = provider ? (providerType == className(provider)) : loop.first %}

      <div id="{{ providerType | id }}" {% if not isCurrent %}class="hidden"{% endif %}>
        {% namespace 'types[' ~ providerType ~ ']' %}
          {% if provider and isCurrent %}
            {{ provider.getSettingsHtml() | raw }}
          {% else %}
            {{ providerInstances[providerType].getSettingsHtml() | raw }}
          {% endif %}
        {% endnamespace %}
      </div>
    {% endfor %}
  </div>
{% endblock %}

{% block details %}
  <div class="meta">
    {{ forms.lightswitchField({
      first: true,
      label: 'Enabled' | t('app'),
      id: 'enabled',
      name: 'enabled',
      on: isNew ? true : provider.enabled,
    }) }}
  </div>

  {% if not isNew %}
    <div id="meta-details" class="meta read-only">
      <div class="data">
        <h5 class="heading">{{ 'Created at' | t('app') }}</h5>
        <div class="value">{{ provider.dateCreated | datetime('short') }}</div>
      </div>

      <div class="data">
        <h5 class="heading">{{ 'Updated at' | t('app') }}</h5>
        <div class="value">{{ provider.dateUpdated | datetime('short') }}</div>
      </div>
    </div>
  {% endif %}
{% endblock %}

{% if not provider or not provider.handle %}
  {% js %}
    new Craft.HandleGenerator('#name', '#handle');
  {% endjs %}
{% endif %}
